library(swirl)
swirl()
dice_sqr
ex2_fair = sum(dice_sqr*dice_fair)
ex2_fair<- sum(dice_sqr*dice_fair)
ex@
ex@
)
ex2_fair - 3.5^2
ex2_fair - 3.5^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/2*sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
swirl()
choose(5,3)*0.8*0.2
choose(5,3)*0.8^3*0.2^2 +choose(5,4)*0.8^4*0.2^1 + choose(5,5)*0.8^5*0.2^0
pbinom(2,5,0.8,lower.tail = FALSE)
qnorm(0.10,0,1)
0
qnorm(0.975,3,2)
X = 3+2*0.975
1.96*2+3
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm(1200)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(0.75,1020,50)
0.53
.53
ppois(3,2.5*4)
pbinom(0.01,2.5*4)
pbinom(0.01,2.5,4)
pbinom(5,1000,.01)
ppois(5,1000*0.01)
0
0
quit()
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(0.95,0,1)
qnorm(0.975)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100,0.6)
binom.test(60,100)$conf.int
mywald(0.2)
ACCompar(20)
lamb <- 5/94.32
lamb+c(-1,1)+qnorm(0.975)*sqrt(lamb/t)
lamb+c(-1,1)+qnorm(0.975)*sqrt(lamb)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
pnorm(93,100,10)
qnorm(0.5,100,10)
qnorm(0.5,100,10,lower.tail = FAlse)
qnorm(0.5,100,10,lower.tail = FAlSe)
qnorm(0.5,100,10,lower.tail = FALSE)
qnorm(0.05,100,10,lower.tail = FALSE)
round(qnorm(.05, mean = 100, sd = 10 / sqrt(50), lower.tail = FALSE), 3)
pbinom(4,6,0.5,lower.tail = FALSE)
qnorm(0.51,0.5,sqrt(1/12),lower.tail = FALSE)
pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
mean((1 : 6 - 3.5)^2 / 10)
ppois(20,16.5)
ppois(20, lambda = 16.5 * 2) * 100
pnorm(70,80,10)
qnorm(0.95,1100,75)
qnorm(0.95,1100,75/100)
qnorm(0.95,1100,75/10)
pbinom(4,5,0.5,lower.tail = FALSE)
ppois(10,5*3)
mn <- mean(mtcars$mpg)
s <- sd(mtcars$mpg)
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
mu0
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
p <- t.test(m4, m6, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
The answer to 1. is 1
The answer to 2. is 4e-04
OK
m4 <- mtcars$mpg[mtcars$cyl == 4]
m6 <- mtcars$mpg[mtcars$cyl == 6]
p <- t.test(m4, m6, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
The answer to 1. is 1
The answer to 2. is 4e-04
OK
p
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
p <- t.test(examinations$baseline,examinations$week2,paired = TRUE,alt = "two.sided")
p
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
test
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
test$p.value
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
pow
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(pow = 0.9, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
pow
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(pow = 0.9, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")
pow$n
ap<-ts(AirPassengers,frequency=12,start=c(1949,1))
library(forecast)
install.packages("forecast")
auto.arima(ap)
library(forecast)
auto.arima(ap)
plot.ts(ap)
aplog<-log(ap)
plot.ts(aplog)
aplogcomponents<-decompose(aplog)
plot(aplogcomponents)
aplogadjusted<-aplog-aplogcomponents$seasonal
plot(aplogadjusted)
aplogdiff1 <-diff(aplogadjusted,differences=1)
plot.ts(aplogdiff1)
par(mfrow=c(2,1))
acf(aplogdiff1)
pacf(aplogdiff1)
par(mfrow=c(1,1))
acf(aplogdiff1)
pacf(aplogdiff1)
library(forecast)
install.packages("forecast")
install.packages("forecast")
auto.arima(ap)
pacf(aplogdiff1)
acf(aplogdiff1)
ap<-ts(AirPassengers,frequency=12,start=c(1949,1))
plot.ts(ap)
aplog<-log(ap)
plot.ts(aplog)
aplogcomponents<-decompose(aplog)
plot(aplogcomponents)
aplogadjusted<-aplog-aplogcomponents$seasonal
plot(aplogadjusted)
aplogdiff1 <-diff(aplogadjusted,differences=1)
plot.ts(aplogdiff1)
par(mfrow=c(1,1))
acf(aplogdiff1)
pacf(aplogdiff1)
library(forecast)
auto.arima(ap)
ap<-ts(AirPassengers,frequency=12,start=c(1949,1))
plot.ts(ap)
aplog<-log(ap)
plot.ts(aplog)
aplogcomponents<-decompose(aplog)
plot(aplogcomponents)
aplogadjusted<-aplog-aplogcomponents$seasonal
plot(aplogadjusted)
aplogdiff1 <-diff(aplogadjusted,differences=1)
plot.ts(aplogdiff1)
par(mfrow=c(2,1))
acf(aplogdiff1)
pacf(aplogdiff1)
library(forecast)
auto.arima(ap)
setwd('D:\\Yelp DataSet\\yelpReport')
title: "Untitled"
author: "Zarmeen"
library(slidify)
slidify("YelpReport")
author("YelpDataSetChallengeReport_Zarmeen")
---
---
